<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="DELETE">
        <category>standard</category>
        <client_script><![CDATA[function loginCtrl($scope, $http, $window, $location, glideUserSession, glideSystemProperties, spUtil) {

	var c = this;
	c.remember_me = c.data.forgetMeDefault;
	c.data.url_suffix = $scope.portal ? $scope.portal.url_suffix : "";
	if (!c.data.is_logged_in && c.data.multisso_enabled && c.data.default_idp) {
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = $scope.portal.login_page_dv == pageId;
		c.server.get({
			action: "set_sso_destination",
			pageURI: isLoginPage ? null : c.data.pageURI
		}).then(function() {
			$window.location = "/login_with_sso.do?glide_sso_id=" + c.data.default_idp;
		});
	}
	
	c.login = function(username, password, isCertLogin) {
		var url = spUtil.getURL({sysparm_type: 'view_form.login'});
		
		// If the page isn't public, then the ID in the
		// URL won't match the rendered page ID
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = $scope.portal.login_page_dv == pageId;

		return $http({
			method: 'post',
			url: url,
			data: $.param({
				'sysparm_type': 'login',
				'ni.nolog.user_password': true,
				'remember_me': !!c.remember_me ? true : false,
				'user_name': username,
				'user_password': password,
				'get_redirect_url': true,
				'sysparm_goto_url': isLoginPage ? null : $location.url(),
				'mfa_redirect_url': isLoginPage ? null : c.data.pageURI,
				'cert_login' : !!isCertLogin
			}),
			headers: {
				'Content-Type': 'application/x-www-form-urlencoded'
			}
		}).then(function(response) {
			if (!response.data) {
				c.message = $scope.data.errorMsg;
				return;
			}

			if (response.data.status == 'success') {
				if (c.data.multiFactorAuthEnabled) {
					c.server.get({
						action: "multi_factor_auth_setup",
						directTo: response.data.redirect_url
					}).then(handleLoginSuccess.bind(response));
				} else {
					handleLoginSuccess.call(response);
				}
			} else if (response.data.status == 'mfa_code_required') {
					$window.location = '/validate_multifactor_auth_code.do';
			} else {
				// wrong username or password
				c.message = response.data.message;
				c.password = "";
				c.username = "";
				angular.element("#username").focus();
			}

		}, function errorCallback(response) {
			c.message = $scope.data.errorMsg;
		});
	};

	c.externalLogin = function() {
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = $scope.portal.login_page_dv == pageId;
		c.server.get({
			action: "set_sso_destination",
			pageURI: isLoginPage ? null : c.data.pageURI
		}).then(function() {
			glideSystemProperties.set("glide.authenticate.multisso.enabled", true);

			glideUserSession.getSsoRedirectUrlForUsername(c.username)
				.then(function(url) {
					$window.location = url;
				}, function(err) {
					spUtil.addErrorMessage($scope.data.errorMsg2);
				});
		});
	}

	function handleLoginSuccess() {
		c.success = this.data.message;
		$window.location = this.data.redirect_url;
		if ($window.location.hash.length > 0)
			$window.location.reload();
	}

	c.setExternalLogin = function(newVal) {
		c.externalLoginMode = newVal;
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.sp-login-widget { 
  
  .panel-body {
    padding: 15px 15px 10px;
  }
  
  .form-control,
  label[for="username"],
  label[for="password"] {
    color: black;
  }
  
  .btn {
    font-weight: 600;
    font-size: 2.0rem;
    background-color: $login-btn-bg;
    border-color: $login-btn-border;
  }
  
  .list-group {
    margin-bottom: 12px;
  }
  
  .login-button-old {
    margin-top: 7px;
  }
  
  .login-alert {
    margin-left: 0px;
    margin-right: 0px;
  }

}
//STRY50033370: Forgot Password link in the login widget
//Start -- login widget advanced view
.sp-login-widget.advanced {  
  .panel-title {
    font-size: 25px;
  }
  
  .panel-default &gt; .panel-heading {
    background-color: $panel-bg; 
    border: 0px;    
  }
  
  .panel-body {
    padding: 0px 0px 10px;
  }

  [placeholder]::-webkit-input-placeholder { 
    transition: opacity 0.01s 0.01s ease !important; 
    opacity: 0 !important; 
  }

  .form-signin {
    .list-group-item { 
      border: 0px;
    }
    
    .login-alert {
    margin-left: 15px;
    margin-right: 15px;
    }
    
    .btn {
      font-weight: 400 !important;
      border-color: $brand-primary;
      background-color: $brand-primary;
      border-radius: 2px;
    }

    .forgot-pwd-div {
      padding-right: 15px;
      padding-left: 15px;
      .forgot-text {
        font-size: 16px;	
        line-height: 20px;
        padding-top: 8px;
      }
      
      .btn {
        line-height: 16px;
        font-size: 14px;
        margin-top: 0px;
      }
      
    }
    
    .submit-btn {
      padding-right: 15px;
      padding-left: 15px;
    }
    
    .input-advanced {
      margin-top: 10px;
      border: 1px solid $panel-default-border !important;
      border-radius: 3px !important;
      background-color: $panel-bg !important;
    }
    
    .checkbox {
      padding-left: 15px !important; 
    }
   
    .label-advanced {
      position: relative;
      width: 100%;
      padding: 0;
      overflow: visible;
      border: 0;
      height: 19px;
      color: $text-color;
      font-size: 16px;
      line-height: 19px;
    }

  }

}
//End -- login widget advanced view
.sp-self-registration {
  text-align: center;
}
.sp-login-widget {
.bar {
  margin: 12px 0;
  span {
    position: relative;
    display: block;
    text-align: center;

    &amp;:before, &amp;:after {
      content: '';
      position: absolute;
      width: calc(50% - 24px);
      height: 1px;
      background-color: #b3bac7;
      top: 8px;
    }
    &amp;:before {
      right: 0;
    }
    &amp;:after {
      left: 0;
    }
  }
}
button.cert, a.idp {
  background-color: #fff;
  border-color: #ccc;
  width: 100%;
  margin-bottom: 10px;

  &amp;:hover {
    border-color: #adadad;
    background-color: #e6e6e6;
  }
  img {
    height: 20px;
    width: 20px;
    margin-bottom: 3px;
    margin-right: 9px;
  }
}
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>pplogin</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>PPLogin</name>
        <option_schema>[{"name":"show_panel","section":"Presentation","default_value":"true","label":"Show Panel","type":"boolean"},{"name":"use_advanced","section":"Presentation","default_value":"false","label":"Use Advanced View","type":"boolean"}]</option_schema>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {
    options.show_panel = options.show_panel == "true" || options.show_panel == true;

    if (input && input.action === "multi_factor_auth_setup") {
        if (gs.getSession().getProperty("setup_multifactor_authn")) {
            gs.getSession().putProperty("nav_to", input.directTo);
            gs.getSession().putProperty("starting_page", input.directTo);
            gs.getSession().putProperty("is_direct_redirect", "true");
        }
        return;
    }

    // We don't want to set a starting page until we've begun the login process.
    if (input && input.action === "set_sso_destination") {
        var gs_nav_to = gs.getSession().getProperty("nav_to");
        gs.getSession().putProperty("nav_to", null);

        if (input.pageURI) {
            gs.getSession().putProperty("is_direct_redirect", "true");
            gs.getSession().putProperty("starting_page", input.pageURI);
        } else if (!gs.getSession().getProperty("starting_page") && gs_nav_to)
            gs.getSession().putProperty("starting_page", gs_nav_to);
        return;

    }

    // for self registration fields
    var portalRecord = $sp.getPortalRecord();
    var self_registration_field = portalRecord ? portalRecord.getValue("user_registration_config") : "";
    if (self_registration_field) {
        var registration_config = new GlideRecord("sys_user_registration_config");
        registration_config.addActiveQuery();
        registration_config.query('sys_id', self_registration_field);
        if (registration_config.next()) {
            var self_registration_record_producer = registration_config.getValue("record_producer");
            var self_registration_label = registration_config.getValue("registration_label") || gs.getMessage("Sign Up");
            data.self_registration_record_producer = self_registration_record_producer;
            data.self_registration_label = self_registration_label;
        }
    }

    //Enabling certificate based authentication per portal
    if (portalRecord && (portalRecord.getValue('enable_certificate_based_authentication') == 1))
        data.cert_based_auth = gs.getProperty('glide.authenticate.mutual.enabled', 'false') == 'true';
        
    //Get the OpenID Connect type Identity provider which can be shown on the Portal login page.
    data.isShowLoginWithIdps = false;
    data.isMultiSSOActive = gs.getProperty('glide.authenticate.multisso.enabled', 'false') == 'true';
	data.showOidcLogin = gs.getProperty('glide.service_portal.show.oidc.login.option', 'false') == 'true';
    var gr = new GlideRecord("oidc_identity_provider");
    if (data.isMultiSSOActive && data.showOidcLogin && gr.isValid()) {
        var oidcUtil = new MultiSSO_OidcUtil();
        data.oidcRecords = oidcUtil.getOidcIdpRecords();
        data.isShowLoginWithIdps = (data.oidcRecords.length > 0);
    }    
        

    //STRY50033370: Forgot Password link in the login widget
    data.pswdResetUrl = gs.getProperty('glide.security.password_reset.uri');
    data.forgotPwdLinkProp = gs.getProperty('glide.security.forgot_password.display.link');

    data.errorMsg = gs.getMessage("There was an error processing your request");
    data.errorMsg2 = gs.getMessage("An error has occurred - please contact your system administrator");
    data.passwordMsg = gs.getMessage("Password");
    data.usernameMsg = gs.getMessage("User name");
    data.forgetMe = GlideProperties.getBoolean("glide.ui.forgetme");
    data.forgetMeDefault = GlideProperties.getBoolean('glide.ui.remember.me.default', true);
    data.is_logged_in = gs.getSession().isLoggedIn();
    var bypass_sso = options.bypass_sso == "true";
    data.multisso_enabled = !bypass_sso && GlideProperties.getBoolean("glide.authenticate.multisso.enabled");
    data.default_idp = GlideProperties.get("glide.authenticate.sso.redirect.idp");
    data.pageURI = new GlideSPUtil().getPageUri();
    data.multiFactorAuthEnabled = GlideProperties.getBoolean('glide.authenticate.multifactor', false);
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-09-09 11:12:39</sys_created_on>
        <sys_id>55b893ac1b627010a6d7c803604bcb11</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>PPLogin</sys_name>
        <sys_package display_value="G4-Parkraumbewirtschaftungssystem" source="x_684800_g4_parkra">f7e434712fd23010e9f0d2172799b66b</sys_package>
        <sys_policy/>
        <sys_scope display_value="G4-Parkraumbewirtschaftungssystem">f7e434712fd23010e9f0d2172799b66b</sys_scope>
        <sys_update_name>sp_widget_55b893ac1b627010a6d7c803604bcb11</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-09-09 11:13:56</sys_updated_on>
        <template><![CDATA[<div ng-if="!data.is_logged_in" class="sp-login-widget" ng-class="::(c.options.use_advanced == 'true' ? 'advanced' : '')">
  <form ng-if="!c.externalLoginMode" class="form-signin" ng-submit="c.login(c.username, c.password)" method="post">
		<div ng-class="::{'panel panel-default': c.options.show_panel}">
			<div ng-if="::c.options.show_panel" class="panel-heading padder-v">	      
				<h3 class="panel-title">${Login}</h3>
			</div>
			<div ng-class="::{'panel-body': c.options.show_panel}">
				<div class="list-group list-group-sm">
					<div class="list-group-item">
            <label for="username" class="sr-only label-advanced">{{::data.usernameMsg}}</label>
            <input id="username" name="username" autocapitalize="off" ng-keypress="c.message = ''" ng-click="c.message = ''" class="form-control no-border input-advanced" type="text" placeholder='{{::data.usernameMsg}}' autofocus="true" ng-model="c.username"/>
					</div>
					<div class="list-group-item">
            <label for="password" class="sr-only label-advanced">{{::data.passwordMsg}}</label>
            <input id="password" name="password" ng-keypress="c.message = ''" ng-click="c.message = ''" class="form-control no-border input-advanced" type="password" placeholder='{{::data.passwordMsg}}' ng-model="c.password"/>
					</div>
				</div>

				<div ng-if="c.message" class="alert alert-danger login-alert" role="alert">{{c.message}}</div>
				<div ng-if="c.success" class="alert alert-success login-alert" role="alert">{{c.success}}</div>

				<div ng-if="::!c.data.forgetMe" class="checkbox">
          <label>
            <input name="c.remember_me" ng-model="c.remember_me" checked="checked" id="remember_me" type="checkbox" class="checkbox" value="true"/> ${Remember me}
					</label>
				</div>
        <!--STRY50033370: Forgot Password link in the login widget-->
        <div class="forgot-pwd-div m-b">
          <div class="row">
            <div ng-if="::(c.data.forgotPwdLinkProp == 'true')" class="forgot-text" ng-class="::(c.options.use_advanced == 'true' ? 'col-xs-8' : 'col-xs-12')">
              <a class="forgot-pwd-link" ng-href="{{::c.data.pswdResetUrl}}" aria-label="${Please click here to reset your password}">${Forgot Password ?}</a>
            </div>
            <div ng-class="::(c.options.use_advanced == 'true' && c.data.forgotPwdLinkProp =='true' ? 'col-xs-4' : 'col-xs-12')">
              <button name="login" type="submit" class="btn btn-lg btn-primary btn-block login-button-old">
                ${Login}
              </button>
            </div>
          </div>
        </div>
        <div class="row set-login-type-link m-t" ng-if="::data.multisso_enabled">
          <div class="col-xs-12 text-center">
            <a href="javascript:void(0)"
               ng-click="c.setExternalLogin(true)">${Use external login}</a>
          </div>
        </div>
        <div ng-class="col-xs-12" ng-if="data.cert_based_auth || data.isShowLoginWithIdps">
          <p class="bar"><span>${OR}</span></p>
        </div>
        <div ng-class="col-xs-12" ng-if="::c.data.cert_based_auth">
           <button name="login" type="button" class="cert btn btn-lg btn-default" ng-click="c.login(null, null, true)"><img alt="" src="certLoginLogo.svg"/>${Login with PIV/CAC card}</button>
        </div>
        <div ng-repeat="a in ::c.data.oidcRecords">
           <div ng-class="col-xs-12">                 
              <a name="login" class="idp btn btn-lg btn-default" ng-href="/login_with_sso.do?glide_sso_id={{::a.sysId}}">
              <img ng-if="::a.isLogoUrlValid" alt="" ng-src="{{::a.logoUrl}}"/>${Log in with} {{::a.name}}
              </a>
           </div>
        </div>
       </div>
     </div>
	</form>
	<form ng-if="c.externalLoginMode" class="form-signin" ng-submit="c.externalLogin()" method="post">
		<div ng-class="::{'panel panel-default': c.options.show_panel}">
			<div ng-if="::c.options.show_panel" class="panel-heading">
				<h3 class="panel-title">${External Login}</h3>
			</div>

			<div ng-class="::{'panel-body': c.options.show_panel}">
				<div class="list-group list-group-sm">
					<div class="list-group-item">
            <label for="username" class="sr-only label-advanced">${User ID}</label>
            <input id="username" name="username" ng-click="message = ''" class="form-control no-border input-advanced" type="text" placeholder='${User ID}' autofocus="true" ng-model="c.username"/>
					</div>
				</div>

        <div class="submit-btn row">
          <div class="col-xs-12">
            <button name="login" type="submit" class="btn btn-lg btn-primary btn-block">
              ${Submit}
            </button>
          </div>
        </div>
        <div class="set-login-type-link row m-t">
          <div class="col-xs-12 text-center">
            <a href="javascript:void(0)"
               ng-click="c.setExternalLogin(false)">${Use internal login}</a>    
          </div>
        </div>
      </div>
		</div>
	</form>
  <div class="sp-self-registration forgot-pwd-link" ng-if="::c.data.self_registration_record_producer">${Don't have an account?}
    <a ng-href="/{{::c.data.url_suffix}}?id=sn_user_registration&sys_id={{::c.data.self_registration_record_producer}}">{{::c.data.self_registration_label}}</a>
  </div>
</div>]]></template>
    </sp_widget>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="G4-Parkraumbewirtschaftungssystem">f7e434712fd23010e9f0d2172799b66b</application>
        <file_path/>
        <instance_id>2eded768db8cfc50e03ad7c8f49619dc</instance_id>
        <instance_name>dev113953</instance_name>
        <name>sp_widget_55b893ac1b627010a6d7c803604bcb11</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sp_widget"&gt;&lt;sp_widget action="INSERT_OR_UPDATE"&gt;&lt;category&gt;standard&lt;/category&gt;&lt;client_script&gt;&lt;![CDATA[function loginCtrl($scope, $http, $window, $location, glideUserSession, glideSystemProperties, spUtil) {

	var c = this;
	c.remember_me = c.data.forgetMeDefault;
	c.data.url_suffix = $scope.portal ? $scope.portal.url_suffix : "";
	if (!c.data.is_logged_in &amp;&amp; c.data.multisso_enabled &amp;&amp; c.data.default_idp) {
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = $scope.portal.login_page_dv == pageId;
		c.server.get({
			action: "set_sso_destination",
			pageURI: isLoginPage ? null : c.data.pageURI
		}).then(function() {
			$window.location = "/login_with_sso.do?glide_sso_id=" + c.data.default_idp;
		});
	}
	
	c.login = function(username, password, isCertLogin) {
		var url = spUtil.getURL({sysparm_type: 'view_form.login'});
		
		// If the page isn't public, then the ID in the
		// URL won't match the rendered page ID
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = $scope.portal.login_page_dv == pageId;

		return $http({
			method: 'post',
			url: url,
			data: $.param({
				'sysparm_type': 'login',
				'ni.nolog.user_password': true,
				'remember_me': !!c.remember_me ? true : false,
				'user_name': username,
				'user_password': password,
				'get_redirect_url': true,
				'sysparm_goto_url': isLoginPage ? null : $location.url(),
				'mfa_redirect_url': isLoginPage ? null : c.data.pageURI,
				'cert_login' : !!isCertLogin
			}),
			headers: {
				'Content-Type': 'application/x-www-form-urlencoded'
			}
		}).then(function(response) {
			if (!response.data) {
				c.message = $scope.data.errorMsg;
				return;
			}

			if (response.data.status == 'success') {
				if (c.data.multiFactorAuthEnabled) {
					c.server.get({
						action: "multi_factor_auth_setup",
						directTo: response.data.redirect_url
					}).then(handleLoginSuccess.bind(response));
				} else {
					handleLoginSuccess.call(response);
				}
			} else if (response.data.status == 'mfa_code_required') {
					$window.location = '/validate_multifactor_auth_code.do';
			} else {
				// wrong username or password
				c.message = response.data.message;
				c.password = "";
				c.username = "";
				angular.element("#username").focus();
			}

		}, function errorCallback(response) {
			c.message = $scope.data.errorMsg;
		});
	};

	c.externalLogin = function() {
		var pageId = $location.search().id || $scope.page.id;
		var isLoginPage = $scope.portal.login_page_dv == pageId;
		c.server.get({
			action: "set_sso_destination",
			pageURI: isLoginPage ? null : c.data.pageURI
		}).then(function() {
			glideSystemProperties.set("glide.authenticate.multisso.enabled", true);

			glideUserSession.getSsoRedirectUrlForUsername(c.username)
				.then(function(url) {
					$window.location = url;
				}, function(err) {
					spUtil.addErrorMessage($scope.data.errorMsg2);
				});
		});
	}

	function handleLoginSuccess() {
		c.success = this.data.message;
		$window.location = this.data.redirect_url;
		if ($window.location.hash.length &gt; 0)
			$window.location.reload();
	}

	c.setExternalLogin = function(newVal) {
		c.externalLoginMode = newVal;
	}
}]]&gt;&lt;/client_script&gt;&lt;controller_as&gt;c&lt;/controller_as&gt;&lt;css&gt;.sp-login-widget { 
  
  .panel-body {
    padding: 15px 15px 10px;
  }
  
  .form-control,
  label[for="username"],
  label[for="password"] {
    color: black;
  }
  
  .btn {
    font-weight: 600;
    font-size: 2.0rem;
    background-color: $login-btn-bg;
    border-color: $login-btn-border;
  }
  
  .list-group {
    margin-bottom: 12px;
  }
  
  .login-button-old {
    margin-top: 7px;
  }
  
  .login-alert {
    margin-left: 0px;
    margin-right: 0px;
  }

}
//STRY50033370: Forgot Password link in the login widget
//Start -- login widget advanced view
.sp-login-widget.advanced {  
  .panel-title {
    font-size: 25px;
  }
  
  .panel-default &amp;gt; .panel-heading {
    background-color: $panel-bg; 
    border: 0px;    
  }
  
  .panel-body {
    padding: 0px 0px 10px;
  }

  [placeholder]::-webkit-input-placeholder { 
    transition: opacity 0.01s 0.01s ease !important; 
    opacity: 0 !important; 
  }

  .form-signin {
    .list-group-item { 
      border: 0px;
    }
    
    .login-alert {
    margin-left: 15px;
    margin-right: 15px;
    }
    
    .btn {
      font-weight: 400 !important;
      border-color: $brand-primary;
      background-color: $brand-primary;
      border-radius: 2px;
    }

    .forgot-pwd-div {
      padding-right: 15px;
      padding-left: 15px;
      .forgot-text {
        font-size: 16px;	
        line-height: 20px;
        padding-top: 8px;
      }
      
      .btn {
        line-height: 16px;
        font-size: 14px;
        margin-top: 0px;
      }
      
    }
    
    .submit-btn {
      padding-right: 15px;
      padding-left: 15px;
    }
    
    .input-advanced {
      margin-top: 10px;
      border: 1px solid $panel-default-border !important;
      border-radius: 3px !important;
      background-color: $panel-bg !important;
    }
    
    .checkbox {
      padding-left: 15px !important; 
    }
   
    .label-advanced {
      position: relative;
      width: 100%;
      padding: 0;
      overflow: visible;
      border: 0;
      height: 19px;
      color: $text-color;
      font-size: 16px;
      line-height: 19px;
    }

  }

}
//End -- login widget advanced view
.sp-self-registration {
  text-align: center;
}
.sp-login-widget {
.bar {
  margin: 12px 0;
  span {
    position: relative;
    display: block;
    text-align: center;

    &amp;amp;:before, &amp;amp;:after {
      content: '';
      position: absolute;
      width: calc(50% - 24px);
      height: 1px;
      background-color: #b3bac7;
      top: 8px;
    }
    &amp;amp;:before {
      right: 0;
    }
    &amp;amp;:after {
      left: 0;
    }
  }
}
button.cert, a.idp {
  background-color: #fff;
  border-color: #ccc;
  width: 100%;
  margin-bottom: 10px;

  &amp;amp;:hover {
    border-color: #adadad;
    background-color: #e6e6e6;
  }
  img {
    height: 20px;
    width: 20px;
    margin-bottom: 3px;
    margin-right: 9px;
  }
}
}&lt;/css&gt;&lt;data_table&gt;sp_instance&lt;/data_table&gt;&lt;demo_data/&gt;&lt;description/&gt;&lt;docs/&gt;&lt;field_list/&gt;&lt;has_preview&gt;false&lt;/has_preview&gt;&lt;id&gt;pplogin&lt;/id&gt;&lt;internal&gt;false&lt;/internal&gt;&lt;link&gt;&lt;![CDATA[function link(scope, element, attrs, controller) {  }]]&gt;&lt;/link&gt;&lt;name&gt;PPLogin&lt;/name&gt;&lt;option_schema&gt;[{"name":"show_panel","section":"Presentation","default_value":"true","label":"Show Panel","type":"boolean"},{"name":"use_advanced","section":"Presentation","default_value":"false","label":"Use Advanced View","type":"boolean"}]&lt;/option_schema&gt;&lt;public&gt;true&lt;/public&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[(function() {
    options.show_panel = options.show_panel == "true" || options.show_panel == true;

    if (input &amp;&amp; input.action === "multi_factor_auth_setup") {
        if (gs.getSession().getProperty("setup_multifactor_authn")) {
            gs.getSession().putProperty("nav_to", input.directTo);
            gs.getSession().putProperty("starting_page", input.directTo);
            gs.getSession().putProperty("is_direct_redirect", "true");
        }
        return;
    }

    // We don't want to set a starting page until we've begun the login process.
    if (input &amp;&amp; input.action === "set_sso_destination") {
        var gs_nav_to = gs.getSession().getProperty("nav_to");
        gs.getSession().putProperty("nav_to", null);

        if (input.pageURI) {
            gs.getSession().putProperty("is_direct_redirect", "true");
            gs.getSession().putProperty("starting_page", input.pageURI);
        } else if (!gs.getSession().getProperty("starting_page") &amp;&amp; gs_nav_to)
            gs.getSession().putProperty("starting_page", gs_nav_to);
        return;

    }

    // for self registration fields
    var portalRecord = $sp.getPortalRecord();
    var self_registration_field = portalRecord ? portalRecord.getValue("user_registration_config") : "";
    if (self_registration_field) {
        var registration_config = new GlideRecord("sys_user_registration_config");
        registration_config.addActiveQuery();
        registration_config.query('sys_id', self_registration_field);
        if (registration_config.next()) {
            var self_registration_record_producer = registration_config.getValue("record_producer");
            var self_registration_label = registration_config.getValue("registration_label") || gs.getMessage("Sign Up");
            data.self_registration_record_producer = self_registration_record_producer;
            data.self_registration_label = self_registration_label;
        }
    }

    //Enabling certificate based authentication per portal
    if (portalRecord &amp;&amp; (portalRecord.getValue('enable_certificate_based_authentication') == 1))
        data.cert_based_auth = gs.getProperty('glide.authenticate.mutual.enabled', 'false') == 'true';
        
    //Get the OpenID Connect type Identity provider which can be shown on the Portal login page.
    data.isShowLoginWithIdps = false;
    data.isMultiSSOActive = gs.getProperty('glide.authenticate.multisso.enabled', 'false') == 'true';
	data.showOidcLogin = gs.getProperty('glide.service_portal.show.oidc.login.option', 'false') == 'true';
    var gr = new GlideRecord("oidc_identity_provider");
    if (data.isMultiSSOActive &amp;&amp; data.showOidcLogin &amp;&amp; gr.isValid()) {
        var oidcUtil = new MultiSSO_OidcUtil();
        data.oidcRecords = oidcUtil.getOidcIdpRecords();
        data.isShowLoginWithIdps = (data.oidcRecords.length &gt; 0);
    }    
        

    //STRY50033370: Forgot Password link in the login widget
    data.pswdResetUrl = gs.getProperty('glide.security.password_reset.uri');
    data.forgotPwdLinkProp = gs.getProperty('glide.security.forgot_password.display.link');

    data.errorMsg = gs.getMessage("There was an error processing your request");
    data.errorMsg2 = gs.getMessage("An error has occurred - please contact your system administrator");
    data.passwordMsg = gs.getMessage("Password");
    data.usernameMsg = gs.getMessage("User name");
    data.forgetMe = GlideProperties.getBoolean("glide.ui.forgetme");
    data.forgetMeDefault = GlideProperties.getBoolean('glide.ui.remember.me.default', true);
    data.is_logged_in = gs.getSession().isLoggedIn();
    var bypass_sso = options.bypass_sso == "true";
    data.multisso_enabled = !bypass_sso &amp;&amp; GlideProperties.getBoolean("glide.authenticate.multisso.enabled");
    data.default_idp = GlideProperties.get("glide.authenticate.sso.redirect.idp");
    data.pageURI = new GlideSPUtil().getPageUri();
    data.multiFactorAuthEnabled = GlideProperties.getBoolean('glide.authenticate.multifactor', false);
})();]]&gt;&lt;/script&gt;&lt;servicenow&gt;false&lt;/servicenow&gt;&lt;sys_class_name&gt;sp_widget&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2021-09-09 11:12:39&lt;/sys_created_on&gt;&lt;sys_id&gt;55b893ac1b627010a6d7c803604bcb11&lt;/sys_id&gt;&lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;&lt;sys_name&gt;PPLogin&lt;/sys_name&gt;&lt;sys_package display_value="G4-Parkraumbewirtschaftungssystem" source="x_684800_g4_parkra"&gt;f7e434712fd23010e9f0d2172799b66b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="G4-Parkraumbewirtschaftungssystem"&gt;f7e434712fd23010e9f0d2172799b66b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sp_widget_55b893ac1b627010a6d7c803604bcb11&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-09-09 11:13:56&lt;/sys_updated_on&gt;&lt;template&gt;&lt;![CDATA[&lt;div ng-if="!data.is_logged_in" class="sp-login-widget" ng-class="::(c.options.use_advanced == 'true' ? 'advanced' : '')"&gt;
  &lt;form ng-if="!c.externalLoginMode" class="form-signin" ng-submit="c.login(c.username, c.password)" method="post"&gt;
		&lt;div ng-class="::{'panel panel-default': c.options.show_panel}"&gt;
			&lt;div ng-if="::c.options.show_panel" class="panel-heading padder-v"&gt;	      
				&lt;h3 class="panel-title"&gt;${Login}&lt;/h3&gt;
			&lt;/div&gt;
			&lt;div ng-class="::{'panel-body': c.options.show_panel}"&gt;
				&lt;div class="list-group list-group-sm"&gt;
					&lt;div class="list-group-item"&gt;
            &lt;label for="username" class="sr-only label-advanced"&gt;{{::data.usernameMsg}}&lt;/label&gt;
            &lt;input id="username" name="username" autocapitalize="off" ng-keypress="c.message = ''" ng-click="c.message = ''" class="form-control no-border input-advanced" type="text" placeholder='{{::data.usernameMsg}}' autofocus="true" ng-model="c.username"/&gt;
					&lt;/div&gt;
					&lt;div class="list-group-item"&gt;
            &lt;label for="password" class="sr-only label-advanced"&gt;{{::data.passwordMsg}}&lt;/label&gt;
            &lt;input id="password" name="password" ng-keypress="c.message = ''" ng-click="c.message = ''" class="form-control no-border input-advanced" type="password" placeholder='{{::data.passwordMsg}}' ng-model="c.password"/&gt;
					&lt;/div&gt;
				&lt;/div&gt;

				&lt;div ng-if="c.message" class="alert alert-danger login-alert" role="alert"&gt;{{c.message}}&lt;/div&gt;
				&lt;div ng-if="c.success" class="alert alert-success login-alert" role="alert"&gt;{{c.success}}&lt;/div&gt;

				&lt;div ng-if="::!c.data.forgetMe" class="checkbox"&gt;
          &lt;label&gt;
            &lt;input name="c.remember_me" ng-model="c.remember_me" checked="checked" id="remember_me" type="checkbox" class="checkbox" value="true"/&gt; ${Remember me}
					&lt;/label&gt;
				&lt;/div&gt;
        &lt;!--STRY50033370: Forgot Password link in the login widget--&gt;
        &lt;div class="forgot-pwd-div m-b"&gt;
          &lt;div class="row"&gt;
            &lt;div ng-if="::(c.data.forgotPwdLinkProp == 'true')" class="forgot-text" ng-class="::(c.options.use_advanced == 'true' ? 'col-xs-8' : 'col-xs-12')"&gt;
              &lt;a class="forgot-pwd-link" ng-href="{{::c.data.pswdResetUrl}}" aria-label="${Please click here to reset your password}"&gt;${Forgot Password ?}&lt;/a&gt;
            &lt;/div&gt;
            &lt;div ng-class="::(c.options.use_advanced == 'true' &amp;&amp; c.data.forgotPwdLinkProp =='true' ? 'col-xs-4' : 'col-xs-12')"&gt;
              &lt;button name="login" type="submit" class="btn btn-lg btn-primary btn-block login-button-old"&gt;
                ${Login}
              &lt;/button&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="row set-login-type-link m-t" ng-if="::data.multisso_enabled"&gt;
          &lt;div class="col-xs-12 text-center"&gt;
            &lt;a href="javascript:void(0)"
               ng-click="c.setExternalLogin(true)"&gt;${Use external login}&lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div ng-class="col-xs-12" ng-if="data.cert_based_auth || data.isShowLoginWithIdps"&gt;
          &lt;p class="bar"&gt;&lt;span&gt;${OR}&lt;/span&gt;&lt;/p&gt;
        &lt;/div&gt;
        &lt;div ng-class="col-xs-12" ng-if="::c.data.cert_based_auth"&gt;
           &lt;button name="login" type="button" class="cert btn btn-lg btn-default" ng-click="c.login(null, null, true)"&gt;&lt;img alt="" src="certLoginLogo.svg"/&gt;${Login with PIV/CAC card}&lt;/button&gt;
        &lt;/div&gt;
        &lt;div ng-repeat="a in ::c.data.oidcRecords"&gt;
           &lt;div ng-class="col-xs-12"&gt;                 
              &lt;a name="login" class="idp btn btn-lg btn-default" ng-href="/login_with_sso.do?glide_sso_id={{::a.sysId}}"&gt;
              &lt;img ng-if="::a.isLogoUrlValid" alt="" ng-src="{{::a.logoUrl}}"/&gt;${Log in with} {{::a.name}}
              &lt;/a&gt;
           &lt;/div&gt;
        &lt;/div&gt;
       &lt;/div&gt;
     &lt;/div&gt;
	&lt;/form&gt;
	&lt;form ng-if="c.externalLoginMode" class="form-signin" ng-submit="c.externalLogin()" method="post"&gt;
		&lt;div ng-class="::{'panel panel-default': c.options.show_panel}"&gt;
			&lt;div ng-if="::c.options.show_panel" class="panel-heading"&gt;
				&lt;h3 class="panel-title"&gt;${External Login}&lt;/h3&gt;
			&lt;/div&gt;

			&lt;div ng-class="::{'panel-body': c.options.show_panel}"&gt;
				&lt;div class="list-group list-group-sm"&gt;
					&lt;div class="list-group-item"&gt;
            &lt;label for="username" class="sr-only label-advanced"&gt;${User ID}&lt;/label&gt;
            &lt;input id="username" name="username" ng-click="message = ''" class="form-control no-border input-advanced" type="text" placeholder='${User ID}' autofocus="true" ng-model="c.username"/&gt;
					&lt;/div&gt;
				&lt;/div&gt;

        &lt;div class="submit-btn row"&gt;
          &lt;div class="col-xs-12"&gt;
            &lt;button name="login" type="submit" class="btn btn-lg btn-primary btn-block"&gt;
              ${Submit}
            &lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="set-login-type-link row m-t"&gt;
          &lt;div class="col-xs-12 text-center"&gt;
            &lt;a href="javascript:void(0)"
               ng-click="c.setExternalLogin(false)"&gt;${Use internal login}&lt;/a&gt;    
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
		&lt;/div&gt;
	&lt;/form&gt;
  &lt;div class="sp-self-registration forgot-pwd-link" ng-if="::c.data.self_registration_record_producer"&gt;${Don't have an account?}
    &lt;a ng-href="/{{::c.data.url_suffix}}?id=sn_user_registration&amp;sys_id={{::c.data.self_registration_record_producer}}"&gt;{{::c.data.self_registration_label}}&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;]]&gt;&lt;/template&gt;&lt;/sp_widget&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-358600613</payload_hash>
        <record_name>PPLogin</record_name>
        <reverted_from/>
        <source>b3db70791b563010a6d7c803604bcb8b</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-09-09 11:13:56</sys_created_on>
        <sys_id>8c091bac1b627010a6d7c803604bcb59</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>17bca43a8b80000001</sys_recorded_at>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-09-09 11:13:56</sys_updated_on>
        <type>Widget</type>
        <update_guid>c4091bac9162701035236b2b5c3e1059</update_guid>
        <update_guid_history>c4091bac9162701035236b2b5c3e1059:-358600613,4dc853ac1d6270103bf7694e3921a760:-1297473347,99b817ac166270100eb24ebef24d11cb:1229467201</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="PPLogin">57a763a81ba27010a6d7c803604bcbc5</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-09-09 12:18:03</sys_created_on>
        <sys_db_object display_value="" name="sp_widget">sp_widget</sys_db_object>
        <sys_id>6bedb1c3758048209d056dd4d1f7a400</sys_id>
        <sys_metadata>55b893ac1b627010a6d7c803604bcb11</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>PPLogin</sys_name>
        <sys_package display_value="G4-Parkraumbewirtschaftungssystem" source="x_684800_g4_parkra">f7e434712fd23010e9f0d2172799b66b</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="G4-Parkraumbewirtschaftungssystem">f7e434712fd23010e9f0d2172799b66b</sys_scope>
        <sys_scope_delete display_value="">00ccbce5a6b94bc0a6cfe0c5ed36e440</sys_scope_delete>
        <sys_update_name>sp_widget_55b893ac1b627010a6d7c803604bcb11</sys_update_name>
        <sys_update_version display_value="sp_widget_55b893ac1b627010a6d7c803604bcb11">8c091bac1b627010a6d7c803604bcb59</sys_update_version>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-09-09 12:18:03</sys_updated_on>
    </sys_metadata_delete>
</record_update>
